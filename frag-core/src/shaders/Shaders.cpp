#include"Shaders/Shaders.h"
const char* gc_shader_vertex_vs = "/**\n"
"    Internal common glsl declaration for the PVEngine.\n"
"    Copyright (C) 2017  Valdemar Lindberg\n"
"\n"
"    This program is free software: you can redistribute it and/or modify\n"
"    it under the terms of the GNU General Public License as published by\n"
"    the Free Software Foundation, either version 3 of the License, or\n"
"    (at your option) any later version.\n"
"\n"
"    This program is distributed in the hope that it will be useful,\n"
"    but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"    GNU General Public License for more details.\n"
"\n"
"    You should have received a copy of the GNU General Public License\n"
"    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
"\n"
"*/\n"
"\n"
"//#version 330\n"
"/*	Extension used.	*/\n"
"#extension GL_ARB_explicit_uniform_location : enable\n"
"#extension GL_ARB_uniform_buffer_object : enable\n"
"#extension GL_ARB_separate_shader_objects : enable\n"
"#extension GL_ARB_enhanced_layouts : enable\n"
"#extension GL_ARB_shader_precision : enable\n"
"\n"
"/*	*/\n"
"#extension GL_ARB_shader_image_size : enable\n"
"#extension GL_ARB_bindless_texture : enable\n"
"#extension GL_ARB_explicit_attrib_location : enable\n"
"/*	*/\n"
"#extension GL_ARB_shading_language_420pack : enable\n"
"\n"
"/*	Check if mobile OpenGL is used.	*/\n"
"#ifdef GL_ES\n"
"precision mediump float;\n"
"precision mediump int;\n"
"#endif\n"
"\n"
"/*	Translate fragment location decleration based on what version.	*/\n"
"#if defined(GL_ARB_explicit_attrib_location) || GL_ARB_enhanced_layouts == 1\n"
"	#define FRAGLOCATION(x, vtype, name) layout(location = x) out vtype name\n"
"#elif __VERSION__ == 130\n"
"	#define FRAGLOCATION(x, vtype, name) out vtype name\n"
"#else\n"
"	#define FRAGLOCATION(x) x\n"
"#endif\n"
"\n"
"/*	Translate based on glsl version.	*/\n"
"#if defined(GL_ARB_explicit_attrib_location) || GL_ARB_enhanced_layouts == 1\n"
"	#define ATTRIBUTE_IN(x) layout(location = x) in\n"
"	#define ATTRIBUTE_OUT(x) layout(location = x) out\n"
"#else\n"
"	#define ATTRIBUTE_IN(x) attribute\n"
"	#define ATTRIBUTE_OUT(x) attribute\n"
"#endif\n"
"\n"
"#if __VERSION__ >= 450 ||  || GL_ARB_enhanced_layouts == 1\n"
"    #define UNIFORMBUFFER(x) layout(std140, binding = x, shared)\n"
"#elif __VERSION__ > 130 || defined(GL_ARB_uniform_buffer_object)\n"
"    #define UNIFORMBUFFER(x) layout(std140, shared)\n"
"#else\n"
"    #define UNIFORMBUFFER(x)\n"
"#endif\n"
"\n"
"/*  Storage buffer. */\n"
"#if __VERSION__ >= 450 || defined(GL_ARB_enhanced_layouts)\n"
"    #define STORAGEBUFFER(x) layout(std140, binding = x, shared)\n"
"#elif __VERSION__ > 130 || defined(GL_ARB_uniform_buffer_object)\n"
"    #define STORAGEBUFFER(x) layout(std140, shared)\n"
"#else\n"
"    #define STORAGEBUFFER(x)\n"
"#endif\n"
"\n"
"ATTRIBUTE_IN(0) vec3 vertex;	/*	*/\n"
"ATTRIBUTE_IN(1) vec2 uv;        /*	*/\n"
"ATTRIBUTE_IN(2) vec3 normal;    /*	*/\n"
"ATTRIBUTE_IN(3) vec3 tangent;	/*	*/\n"
"\n"
"///*  Sprite textures.    */\n"
"//#ifdef gl_MaxTextureImageUnits\n"
"//uniform sampler2D textures[gl_MaxTextureImageUnits];\n"
"//#else\n"
"//uniform sampler2D textures[16];\n"
"//#endif\n"
"\n"
"layout(std140, binding=2) uniform matrixBuffer {\n"
"    uniform mat4 MVP;\n"
"    uniform mat4 Model;\n"
"};\n"
"\n"
"/*  */\n"
"layout(location = 0) out vec2 vUV;\n"
"layout(location = 1) out vec3 vNormal;\n"
"layout(location = 2) out vec3 vTangent;\n"
"layout(location = 3) out vec3 vVertex;\n"
"layout(location = 4) out vec3 vWVVertex;\n"
"\n"
"out gl_PerVertex\n"
"{\n"
"	vec4 gl_Position;\n"
"};\n"
"\n"
"void main(void){\n"
"\n"
"	gl_Position = MVP * vec4(vertex, 1.0);\n"
"	vVertex = (Model * vec4(vertex, 0.0)).xyz;\n"
"	//vWVVertex = (getViewMatrix() * Model * vec4(vertex, 1.0)).xyz;\n"
"\n"
"	vUV = uv;\n"
"	vNormal = (Model * vec4(normal, 0.0)).xyz;\n"
"	vTangent = (Model * vec4(tangent, 0.0)).xyz;\n"
"}\n"
"\n"
"\n";

const unsigned int gc_shader_vertex_vs_size = 3979;

const char* gc_shader_display_vs = "/**\n"
"    Copyright (C) 2019  Valdemar Lindberg\n"
"\n"
"    This program is free software: you can redistribute it and/or modify\n"
"    it under the terms of the GNU General Public License as published by\n"
"    the Free Software Foundation, either version 3 of the License, or\n"
"    (at your option) any later version.\n"
"\n"
"    This program is distributed in the hope that it will be useful,\n"
"    but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"    GNU General Public License for more details.\n"
"\n"
"    You should have received a copy of the GNU General Public License\n"
"    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
"\n"
"*/\n"
"#extension GL_ARB_separate_shader_objects : enable\n"
"#extension GL_ARB_explicit_attrib_location : enable\n"
"#extension GL_ARB_enhanced_layouts : enable\n"
"#extension GL_ARB_shader_clock : enable\n"
"#extension GL_ARB_gpu_shader_int64 : enable\n"
"\n"
"#if defined(GL_ARB_explicit_attrib_location)\n"
"layout(location = 0) in vec3 vertex;\n"
"#else\n"
"attribute vec3 vertex;\n"
"#endif\n"
"\n"
"//#if __VERSION__ > 120\n"
"//layout(location = 1) out vec2 uv;\n"
"//#else\n"
"//varying vec2 uv;\n"
"//#endif\n"
"\n"
"layout(location = 1) out vec2 uv;\n"
"layout(location = 2) out float time;\n"
"uniform sampler2D tex0;\n"
"\n"
"out gl_PerVertex\n"
"{\n"
"	vec4 gl_Position;\n"
"};\n"
"\n"
"void main(void) {\n"
"	gl_Position = vec4(vertex,1.0);\n"
"	uv = (vertex.xy + vec2(1.0)) / 2.0;\n"
"	time = float(clock2x32ARB().x / 1000000000);\n"
"}\n"
"\n"
"\n"
"\n";

const unsigned int gc_shader_display_vs_size = 1635;

const char* gc_shader_skybox_fs = "FRAGLOCATION(0, vec4, fragColor);\n"
"FRAGLOCATION(4, vec4, intensity);\n"
"\n"
"IN vec3 vVertex;\n"
"uniform samplerCube texture0;\n"
"\n"
"void main(void){\n"
"	fragColor = texture(texture0, vVertex);\n"
"}\n"
"\n";

const unsigned int gc_shader_skybox_fs_size = 217;

const char* gc_shader_common_vs = "/**\n"
"    Internal common glsl declaration for the PVEngine.\n"
"    Copyright (C) 2019  Valdemar Lindberg\n"
"\n"
"    This program is free software: you can redistribute it and/or modify\n"
"    it under the terms of the GNU General Public License as published by\n"
"    the Free Software Foundation, either version 3 of the License, or\n"
"    (at your option) any later version.\n"
"\n"
"    This program is distributed in the hope that it will be useful,\n"
"    but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"    GNU General Public License for more details.\n"
"\n"
"    You should have received a copy of the GNU General Public License\n"
"    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
"\n"
"*/\n"
"\n"
"/*	Extension used.	*/\n"
"#extension GL_ARB_explicit_uniform_location : enable\n"
"#extension GL_ARB_uniform_buffer_object : enable\n"
"#extension GL_ARB_separate_shader_objects : enable\n"
"#extension GL_ARB_enhanced_layouts : enable\n"
"#extension GL_ARB_shader_precision : enable\n"
"\n"
"/*	*/\n"
"#extension GL_ARB_shader_image_size : enable\n"
"#extension GL_ARB_bindless_texture : enable\n"
"#extension GL_ARB_explicit_attrib_location : enable\n"
"\n"
"/*	Check if mobile OpenGL is used.	*/\n"
"#ifdef GL_ES\n"
"precision mediump float;\n"
"precision mediump int;\n"
"#endif\n"
"\n"
"/*	Translate fragment location decleration based on what version.	*/\n"
"#if defined(GL_ARB_explicit_attrib_location) || GL_ARB_enhanced_layouts == 1\n"
"#define FRAGLOCATION(x, vtype, name) layout(location = x) out vtype name\n"
"#elif __VERSION__ == 130\n"
"#define FRAGLOCATION(x, vtype, name) out vtype name\n"
"#else\n"
"#define FRAGLOCATION(x) x\n"
"#endif\n"
"\n"
"/*	Translate based on glsl version.	*/\n"
"#if defined(GL_ARB_explicit_attrib_location) || GL_ARB_enhanced_layouts == 1\n"
"#define ATTRIBUTE_IN(x) layout(location = x) in\n"
"#define ATTRIBUTE_OUT(x) layout(location = x) out\n"
"#else\n"
"#define ATTRIBUTE_IN(x) attribute\n"
"#define ATTRIBUTE_OUT(x) attribute\n"
"#endif\n"
"\n"
"#if __VERSION__ >= 450 ||  || GL_ARB_enhanced_layouts == 1\n"
"#define UNIFORMBUFFER(x) layout(std140, binding = x, shared)\n"
"#elif __VERSION__ > 130 || defined(GL_ARB_uniform_buffer_object)\n"
"#define UNIFORMBUFFER(x) layout(std140, shared)\n"
"#else\n"
"#define UNIFORMBUFFER(x)\n"
"#endif\n"
"\n"
"/*  Storage buffer. */\n"
"#if __VERSION__ >= 450 || defined(GL_ARB_enhanced_layouts)\n"
"#define STORAGEBUFFER(x) layout(std140, binding = x, shared)\n"
"#elif __VERSION__ > 130 || defined(GL_ARB_uniform_buffer_object)\n"
"#define STORAGEBUFFER(x) layout(std140, shared)\n"
"#else\n"
"#define STORAGEBUFFER(x)\n"
"#endif\n";

const unsigned int gc_shader_common_vs_size = 2760;

const char* gc_shader_computeHierarchy_cm = "layout (local_size_x = 32, local_size_y = 32) in;\n"
"layout(binding = 0) uniform writeonly samplerBuffer matrixBuffer;\n"
"\n"
"void main(void) {\n"
"\n"
"}\n"
"\n";

const unsigned int gc_shader_computeHierarchy_cm_size = 166;

const char* gc_shader_display_fs = "/**\n"
"    Copyright (C) 2019  Valdemar Lindberg\n"
"\n"
"    This program is free software: you can redistribute it and/or modify\n"
"    it under the terms of the GNU General Public License as published by\n"
"    the Free Software Foundation, either version 3 of the License, or\n"
"    (at your option) any later version.\n"
"\n"
"    This program is distributed in the hope that it will be useful,\n"
"    but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"    GNU General Public License for more details.\n"
"\n"
"    You should have received a copy of the GNU General Public License\n"
"    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
"\n"
"*/\n"
"#extension GL_ARB_separate_shader_objects : enable\n"
"#extension GL_ARB_explicit_attrib_location : enable\n"
"\n"
"#if defined(GL_ARB_explicit_attrib_location)\n"
"layout(location = 0) out vec4 fragColor;\n"
"#elif __VERSION__ == 130\n"
"out vec4 fragColor;\n"
"#endif\n"
"//layout(binding = 1)\n"
"layout(location = 1) in vec2 uv;\n"
"uniform sampler2D tex0;\n"
"\n"
"//#if __VERSION__ > 120\n"
"//layout(location = 1) in vec2 uv;\n"
"//#else\n"
"//varying vec2 uv;\n"
"//#endif\n"
"\n"
"/*  TODO add extension for checking.    */\n"
"void main(void){\n"
"	#if defined(GL_ARB_explicit_attrib_location)\n"
"	fragColor = texture(tex0, uv);\n"
"	#else\n"
"	gl_FragColor = texture2D(tex0, uv);\n"
"	#endif\n"
"}\n"
"\n";

const unsigned int gc_shader_display_fs_size = 1489;

const char* gc_shader_skybox_vs = "ATTRIBUTE_IN(0) vec3 vertex;\n"
"OUT vec3 vVertex;\n"
"\n"
"void main (void){\n"
"	vec4 viewpos  = getViewRotationMatrix() * vec4(vertex, 1.0);\n"
"	gl_Position = viewpos.xyww;\n"
"	vVertex = vertex;\n"
"}\n"
"\n"
"\n";

const unsigned int gc_shader_skybox_vs_size = 219;

const char* gc_shader_common_fs = "\n";

const unsigned int gc_shader_common_fs_size = 4;

